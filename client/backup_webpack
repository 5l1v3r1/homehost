const path = require('path');

var config = {
    entry: ['babel-polyfill', path.resolve(__dirname, 'src', 'index.js')],
    output: {
        path: path.resolve(__dirname, 'public'),
        filename: 'bundle.js'
    },
    devServer: {
        contentBase: path.resolve(__dirname, 'src'),
        publicPath: path.resolve(__dirname, 'public'),
        port: 3000
    },
    module: {
        rules: [
        {
            test: /\.js$/,
            exclude: /(node_modules|bower_components)/,
            use: [
                { loader: 'babel-loader',
                options: { presets: ['@babel/env', '@babel/react'] } }
            ]
        },
        {
            test: /\.css$/,
            use: [
                {
                    loader: "style-loader", 
                    options: { singleton: true }
                },
                {
                    loader: "css-loader",
                    options: { modules: true,
                    camelCase: 'dashes',
                    localIdentName: '[path][name]__[local]' }
                }
            ]
        }
        ]
    }
};
module.exports = config;
    


// loader: [
//       {
//         test: /\.jsx?$/,
//         exclude: /node_modules/,
//         loader: 'babel-loader',
//         query: {
//           presets: ['env', 'react']
//         }
//       },
//       {
//         test: /\.css$/,
//         loader: "style-loader!css-loader?modules"
//       },
//     ]





return (
        <div className={classNames(style.bgDarken1, style.red, style.mt1, style.mb3, style.rounded)}>
          <div className={style.p2}>
            <div className={classNames(style.flex, style.flexCenter)}>
              <h2 className={classNames(style.h4, style.flexAuto, style.nowrap, style.m0, style.semibold)}>{data.artist_name}</h2>
              <Timer className={classNames(style.h6, style.mr1, style.regular)} {...props} />
            </div>
            <h2 className={classNames(style.h2, style.nowrap, style.caps, style.mt0, style.mb2, style.semibold)}>{data.album_name}</h2>
            <div className={classNames(style.flex, style.flexCenter)}>

              <PrevButton
                className={classNames(style.flexNone, style.h3, style.button, style.buttonNarrow, style.buttonTransparent, style.buttonGrow, style.rounded)}
                onPrevClick={this.prevIndex.bind(this)} {...props}
              />
              <PlayButton 
                className={classNames(style.flexNone, style.h2, style.button, style.buttonTransparent, style.buttonGrow, style.rounded)}
                {...props}
              />
              <NextButton
                className={classNames(style.flexNone, style.h3, style.button, style.buttonNarrow, style.buttonTransparent, style.buttonGrow, style.rounded)}
                onNextClick={this.nextIndex.bind(this)} {...props}
              />
              <VolumeControl
                className={classNames(style.flex, style.flexCenter, style.mr2)}
                buttonClassName={classNames(style.flexNone, style.h4, style.button, style.buttonTransparent, style.buttonGrow, style.rounded)}
                {...props}
              />
              <Progress
                className={classNames(style.mt1, style.mb1, style.rounded)}
                innerClassName={style.roundedLeft}
                {...props}
              />

            </div>
          </div>
        </div>
      );




:global(@import '~basscss/css/basscss.css';
@import '~react-soundplayer/styles/buttons.css';
@import '~react-soundplayer/styles/cover.css';
@import '~react-soundplayer/styles/icons.css';
@import '~react-soundplayer/styles/progress.css';
@import '~react-soundplayer/styles/volume.css';
)

/* basscss */
:global(svg) {
    fill: var(--description-color);
    stroke: var(--description-color);
}

:global(.red) {
  color: var(--description-color); /*#ff4136;*/
  margin-bottom: 8px;
}

:global(.p2) {
  text-align: left;
}

/* react-soundplayer */
:global(.sb-soundplayer-progress-container) {
  background-color: var(--title-color);
}

:global(.sb-soundplayer-progress-inner) {
  background-color: var(--description-color);
}

:global(.sb-soundplayer-volume-range::-webkit-slider-runnable-track) {
background: var(--title-color);
}

:global(.sb-soundplayer-volume-range::-webkit-slider-thumb) {
  background: var(--description-color);
}



{ test: /\.css$/, loader: '!style-loader!css-loader!' },